% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluation.R
\name{crossValidateAlgos}
\alias{crossValidateAlgos}
\title{Evaluates the quality of different algos by cross-validation of their predictions}
\usage{
crossValidateAlgos(trainModelFuncs, predictByModelFuncs, subgroupQualityFunc,
  dbY, dbTrt, dbX, numTrials, splitFunc, splitOpts)
}
\arguments{
\item{trainModelFuncs}{a vector of functions that build models. The prototype is function(Y,Trt,X), where Y is the response variable, Trt is the 0-1 treatment variable, and X is the covariate matrix.}

\item{predictByModelFuncs}{a vector of functions that predicts by models build by the corresponding furnction from trainModelFuncs. The prototype is function(m,X), where m is the model returned by the corresponding function, and X is the covariate matrix.}

\item{subgroupQualityFunc}{a function that evaluate the quality of a subgroup. The prototype is function(subgroup, Y, Trt), where subgroup is T-F vector defining a subgroup, and Y and Trt are similar as for the functions from trainModelFuncs}

\item{dbY}{a response variable}

\item{dbTrt}{a treatment 0-1 variable}

\item{dbX}{train covariates}

\item{numTrials}{a number of times a random division in train-test subdataset should be taken}

\item{splitFunc}{a function that splits the dataset into training and holdout sets}

\item{splitOpts}{the options that are passed to trainHoldoutSplittingFunc}
}
\value{
a list with found subgroups in the test set of length testProportion*length(dbY)*numTrials, their sizes, qualities, and qualities of a random subset of similar size for all the algorithms
}
\description{
Evaluates the quality of different algos by cross-validation of their predictions
}
\details{
Takes a set of models and returns the quality of the selected groups by means of subgroupQualityFunc in Cross-Validation
}
\examples{

# Generating dataset
Trt = rbinom(1000,1,0.5)
X = data.frame(X1=rbinom(1000,1,0.6), X2=rnorm(1000), X3=rnorm(1000))
Y = as.numeric( ( 2*X$X1 - 1 + X$X2*Trt + rnorm(1000) ) > 0 )
# Evaluating algos
res = crossValidateAlgos(
    c(trainModelRandomForest,trainModelModLM), # Two functions that trains the model
    c(predictByModelRandomForest,predictByModelModLM), # The corresponding prediction functions
    subgroupAverageTreatmentEffect, # The function that compute the quality of a subgroup
    Y, Trt, X,
    numTrials = 5,
    balansedSplit, list(InitSplitProportion=0.2)
    )
print(paste0("Random Forest Model Quality = ",mean(res$Qualities[,1])))
print(paste0("Modified Linear Model Quality = ",mean(res$Qualities[,2])))

}
